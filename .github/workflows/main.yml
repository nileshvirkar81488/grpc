name: SonarQube C/C++ Analysis

on:
  push:
    branches:
      - main # Or your default branch
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build_and_analyze:
    name: Build and Analyze
    runs-on: ubuntu-latest
    
    env:
      # Defines the output directory for the build-wrapper.
      BUILD_WRAPPER_OUT_DIR: build_wrapper_output_directory 

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # SonarQube requires a deep clone to analyze blame information.
          fetch-depth: 0

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential autoconf libtool pkg-config cmake clang

      - name: Checkout submodules
        run: git submodule update --init --recursive

      - name: Install SonarQube Build Wrapper
        # This action downloads the build-wrapper executable.
        uses: SonarSource/sonarqube-scan-action/install-build-wrapper@v5

      - name: Run Build Wrapper
        # This step configures the project with CMake and then runs the build
        # command (make) inside the build-wrapper to capture compiler calls.
        run: |
          mkdir build
          cd build
          cmake ..
          build-wrapper-linux-x86-64 --out-dir ${{ env.BUILD_WRAPPER_OUT_DIR }} make all -j$(nproc)

      - name: Run SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          # This token is stored in your repository's secrets.
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=your_project_key
            -Dsonar.organization=your_organization_key
            -Dsonar.sources=.
            -Dsonar.host.url=https://sonarcloud.io
            -Dsonar.cfamily.build-wrapper-output=${{ env.BUILD_WRAPPER_OUT_DIR }}
